from CybORG import CybORG
from CybORG.Agents import SleepAgent, EnterpriseGreenAgent
from CybORG.Agents.SimpleAgents.FiniteStateRedAgent_ava import FiniteStateRedAgent
from CybORG.Agents.SimpleAgents.MyBlueAgent3 import MyBlueAgent
from CybORG.Agents.SimpleAgents.RandomAgent import cc4BlueRandomAgent
from CybORG.Simulator.Scenarios import EnterpriseScenarioGenerator
from CybORG.Simulator.Actions.AbstractActions import CrackPassword,ExploitRemoteService
import numpy as np
import matplotlib.pyplot as plt

steps = 600
bias_dimension=8
df_sg = EnterpriseScenarioGenerator(blue_agent_class=MyBlueAgent,
                                    green_agent_class=EnterpriseGreenAgent,
                                    red_agent_class=FiniteStateRedAgent,
                                    steps=steps,
                                    # redParameters=aggressive_para,
                                    )

actions={}
for agent_idx in range(6):
    actions['red_agent_' + str(agent_idx)]=[]
filename = 'recall_ratio.txt'
cracking_log=[]
total_times=0
uncracks_times=0
uncrack_rates=np.zeros(steps)
epoch_num=20
agent_num=5
coefficient=[0,10,1000]
easy_call_ratio=np.zeros((len(coefficient), epoch_num,steps))

exploit_port=np.zeros((agent_num+1,steps))


with open(filename, 'w') as file:
    # Initialise environment
    for epoch in range(epoch_num):
        for coef_index in range(len(coefficient)):
            total_exploit_times = 0
            recall_times =0
            df_sg.ava_reward=coefficient[coef_index]
            cyborg = CybORG(scenario_generator=df_sg,seed=1234)
            for step in range(steps):
                cyborg.step()
                step_actions = cyborg.environment_controller.action
                for agent_idx in range(1, 6):
                    agent_name='red_agent_'+str(agent_idx)
                    action=step_actions[agent_name][0]
                    agent=cyborg.environment_controller.agent_interfaces[agent_name].agent
                    if action.name=="Sleep":
                        continue
                    if isinstance(action,ExploitRemoteService):
                        exploit_port[agent_idx][step]=action.selected_port

                        total_exploit_times+=1
                        if exploit_port[agent_idx][step]==exploit_port[agent_idx][step - 1]:
                            recall_times+=1
                    elif step>0:
                        exploit_port[agent_idx][step]=exploit_port[agent_idx][step - 1]

                if total_exploit_times>0:
                    easy_call_ratio[coef_index][epoch][step]\
                        =recall_times/total_exploit_times

    average=np.mean(easy_call_ratio, axis=1)
    vairance=np.var(easy_call_ratio, axis=1)

    # res=np.zeros((len(coefficient),steps))
    # for coef_index in range(len(coefficient)):
    #     for step in range(steps):
    #         for epoch in range(epoch_num):
    #             res[coef_index][step]+=easy_call_ratio[coef_index][epoch][step]
    #         res[coef_index][step]/=epoch_num
    #
    #         if step<=200 and step>0:
    #             file.write(str('{:.2f}'.format(res[coef_index][step])))
    #             file.write(',0\n')
    #         elif step>200:
    #             file.write(str('{:.2f}'.format(res[coef_index][step])))
    #             file.write(','+str(coef_index+1)+'\n')


    plt.plot(average[0], label='Non trigger')
    plt.plot(average[1], label='LOW to MEDIUM')
    plt.plot(average[2], label='LOW to HIGH')

    plt.title('Availability heuristic')
    plt.xlabel('Steps')
    plt.ylabel('ratio of recalled use of exploits')
    plt.legend()
    plt.savefig('Availability heuristic.png')
    plt.clf()
    print('avg0',average[0][-1])
    print('avg1',average[1][-1])
    print('avg2',average[2][-1])

    plt.plot(vairance[0], label='Non trigger')
    plt.plot(vairance[1], label='LOW to MEDIUM')
    plt.plot(vairance[2], label='LOW to HIGH')

    plt.title('Availability heuristic variance')
    plt.xlabel('Steps')
    plt.ylabel('variance')
    plt.legend()
    plt.savefig('Availability heuristic variance.png')
