from CybORG import CybORG
from CybORG.Agents import SleepAgent, EnterpriseGreenAgent
from CybORG.Agents.SimpleAgents.FiniteStateRedAgent_sunk import FiniteStateRedAgent
from CybORG.Agents.SimpleAgents.MyBlueAgent import MyBlueAgent
from CybORG.Agents.SimpleAgents.RandomAgent import cc4BlueRandomAgent
from CybORG.Simulator.Scenarios import EnterpriseScenarioGenerator
from CybORG.Simulator.Actions.AbstractActions import CrackPassword
import numpy as np
import matplotlib.pyplot as plt

steps = 600
bias_dimension=8
df_sg = EnterpriseScenarioGenerator(blue_agent_class=MyBlueAgent,
                                    green_agent_class=EnterpriseGreenAgent,
                                    red_agent_class=FiniteStateRedAgent,
                                    steps=steps,
                                    # redParameters=aggressive_para,
                                    )

actions={}
for i in range(6):
    actions['red_agent_'+str(i)]=[]
filename = 'max_crack_ratio.txt'
cracking_log=[]
total_times=0
uncracks_times=0
uncrack_rates=np.zeros(steps)
epoch_num=10

coefficient=[0,1000,10000]
max_crack_times=np.zeros((len(coefficient),epoch_num,steps))

with open(filename, 'w') as file:
    # Initialise environment
    for epoch in range(epoch_num):
        for coef_index in range(len(coefficient)):
            df_sg.sunk_reward=coefficient[coef_index]
            cyborg = CybORG(scenario_generator=df_sg,seed=1234)
            for step in range(steps):
                cyborg.step()
                step_actions = cyborg.environment_controller.action
                max_crack_times[coef_index][epoch][step] = max(max_crack_times[coef_index][epoch][step],
                                                               max_crack_times[coef_index][epoch][step - 1])
                for i in range(1,6):
                    agent_name='red_agent_'+str(i)
                    action=step_actions[agent_name][0]
                    agent=cyborg.environment_controller.agent_interfaces[agent_name].agent
                    if action.name=="Sleep":
                        continue
                    if isinstance(action,CrackPassword):
                        max_crack_times[coef_index][epoch][step] \
                            = max(max_crack_times[coef_index][epoch][step], action.file.crack_times)
                    actions[agent_name].append(action.name)
    average=np.mean(max_crack_times, axis=1)
    vairance=np.var(max_crack_times, axis=1)
    # for coef_index in range(len(coefficient)):
    #     for step in range(steps):
    #         for i in range(epoch_num):
    #             average[coef_index][step]+=max_crack_times[coef_index][i][step]
    #         average[coef_index][step]/=epoch_num
    #         dis=100
    #         if step<=250+(dis+1)//2 and step>(dis+1):
    #             file.write(str('{:.1f}'.format(average[coef_index][step] - average[coef_index][step - dis])))
    #             file.write(',0\n')
    #         elif step>250+(dis+1)//2:
    #             file.write(str('{:.1f}'.format(average[coef_index][step] - average[coef_index][step - dis])))
    #             file.write(','+str(coef_index+1)+'\n')

    plt.plot(average[0], label='Non trigger')
    plt.plot(average[1], label='LOW to MEDIUM')
    plt.plot(average[2], label='LOW to HIGH')

    plt.title('Sunk cost fallacy')
    plt.xlabel('Steps')
    plt.ylabel('Maximum cracking action times on one file')
    plt.legend()
    plt.savefig('sunk cost.png')
    plt.clf()
    print('avg0',average[0][-1])
    print('avg1',average[1][-1])
    print('avg2',average[2][-1])

    plt.plot(vairance[0], label='Non trigger')
    plt.plot(vairance[1], label='LOW to MEDIUM')
    plt.plot(vairance[2], label='LOW to HIGH')

    plt.title('Sunk cost fallacy variance')
    plt.xlabel('Steps')
    plt.ylabel('Maximum cracking action times on one file')
    plt.legend()
    plt.savefig('sunk cost variance.png')

    print('var0',vairance[0][-1])
    print('var1',vairance[1][-1])
    print('var2',vairance[2][-1])

