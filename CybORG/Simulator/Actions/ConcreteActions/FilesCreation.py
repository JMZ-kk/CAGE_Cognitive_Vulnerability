from typing import Set
from CybORG.Shared.Enums import DecoyType
from CybORG.Shared.Observation import Observation
from CybORG.Shared.Session import Session
from CybORG.Simulator.Actions import Action
from CybORG.Simulator.Actions.AbstractActions.Misinform import Decoy, DecoyFactory
from CybORG.Simulator.Host import Host
from CybORG.Simulator.Process import Process
from CybORG.Simulator.Service import Service
from CybORG.Simulator.State import State


class FilesCreation(Action):

    def __init__(self, hostname, filenames: list,
                 valuelist:list=None,
                 hardnesslist:list=None,
                 true_value_list:list=None,
                 passwordlist:list=None,
                 message=None):
        super().__init__()
        self.hostname = hostname
        self.filenames=filenames
        self.valuelist=valuelist
        self.hardnesslist=hardnesslist
        self.true_value_list=true_value_list
        self.duration=1
        self.message=message
        self.passwordlist=passwordlist

    def execute(self, state: State) -> Observation:
        obs_succeed = Observation(True)
        if isinstance(self.hostname, list):
            for i in range(len(self.hostname)):
                host_name=self.hostname[i]
                filename = self.filenames[i]
                if self.valuelist is None:
                    state.add_file(host=host_name,name=filename,path='/'
                                   ,value=0,hard=0,true_value=0,message=self.message[i])
                else:
                    value = self.valuelist[i]
                    hard = self.hardnesslist[i]
                    if self.true_value_list is None:
                        true_value=value
                    else:
                        true_value=self.true_value_list[i]
                    state.add_file(host=host_name, name=filename, path='/',
                                   value=value, hard=hard,true_value=true_value,message=self.message[i])
                obs_succeed.add_file_info(name=filename)

        else:
            for i in range(len(self.filenames)):
                filename=self.filenames[i]
                if self.valuelist is None:
                    state.add_file(host=self.hostname,name=filename,path='/',value=0,hard=0,true_value=0,message=self.message)
                else:
                    value = self.valuelist[i]
                    hard = self.hardnesslist[i]
                    password=self.passwordlist[i]
                    if self.message is None:
                        self.message={'password':password}
                    if self.true_value_list is None:
                        true_value=value
                    else:
                        true_value=self.true_value_list[i]
                    state.add_file(host=self.hostname, name=filename, path='/',
                                   value=value, hard=hard,true_value=true_value,
                                   message=self.message)
                obs_succeed.add_file_info(name=filename)
        return obs_succeed

    def __str__(self):
        return f"{self.__class__.__name__} {self.hostname}"
