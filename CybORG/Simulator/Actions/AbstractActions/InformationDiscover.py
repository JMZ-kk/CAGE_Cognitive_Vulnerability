
from CybORG.Shared import Observation
from CybORG.Simulator.Actions import Action
from CybORG.Simulator.Actions.ConcreteActions.StopService import StopService
from CybORG.Simulator.State import State


class InformationDiscover(Action):
    def __init__(self, hostname: str, session: int, agent: str):
        super().__init__()
        self.agent = agent
        self.session = session
        self.hostname = hostname
        self.duration=1

    def execute(self, state: State) -> Observation:
        # (1) find session on the chosen host
        sessions_on_host = [s for s in state.sessions[self.agent].values() if s.hostname == self.hostname]
        if len(sessions_on_host) == 0:
            return Observation(success=False)
        
        # (2) find if any session are already SYSTEM or root
        session = next((s.ident for s in sessions_on_host if s.has_privileged_access()), None)
        if session is None:
            return Observation(success=False)
        
        # (3) find if host has services
        host=state.hosts[self.hostname]
        services = [service for s_name, service in host.services.items() if service.active]

        success= True

        obs = Observation(success=success)

        for service in services:
            process_state = host.get_process(service.process).get_state()
            obs.add_process(hostid=self.hostname, **process_state[0])
        for file in host.files:
            obs.add_file_info(hostid=self.hostname, name=file.name,path=file.path,
                              density=file.density,value=file.value,message=file.message)

        return obs

    def __str__(self):
        return f"{self.__class__.__name__} {self.hostname}"

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all((
            self.name == other.name,
            self.hostname == other.hostname,
            self.agent == other.agent,
            self.session == other.session,
        ))
