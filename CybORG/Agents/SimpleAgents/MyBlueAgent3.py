from inspect import signature
from collections import Counter
from gym import Space
from gym.vector.utils import spaces
import numpy as np
from CybORG.Agents.SimpleAgents.BaseAgent import BaseAgent
from CybORG.Simulator.Actions.AbstractActions import *
from CybORG.Simulator.Actions.ConcreteActions.DecoyActions import *
from CybORG.Simulator.Actions.ConcreteActions.FilesCreation import FilesCreation
from CybORG.Simulator.Actions.ConcreteActions.UserCreation import UserCreation
import random

# agent that does random action
from CybORG.Simulator.Actions import Sleep

# testing
from CybORG.Simulator.Actions.ConcreteActions.ControlTraffic import BlockTrafficZone, AllowTrafficZone


class MyBlueAgent(BaseAgent):
    def __init__(self, name=None, epsilon=1.0, np_random=None):
        super().__init__(name, np_random)
        self.step = 0
        self.epsilon = epsilon
        self.action_params = None
        self.excluded_actions = [Monitor]
        self.subnet_name = None
        self.sessions_map = {}
        self.ip_map = {}
        self.blue_process_list = {}
        self.last_action = 'Sleep'
        self.decoy_pids = []
        self.suspicious = []
        self.bad_hosts = {}
        self.hosts_with_files = []
        self.host_index = 0
        self.cred_depoly=False
        self.banner_depoly = False
        self.host_index_sunk = 0
        self.host_index_base_rate = 0
        self.host_index_availability = 0
        self.sunk_trigger_step = 0
        self.ava_trigger_step = 200
        self.file_records={}
        self.apache_index=0

    def train(self, results):
        pass

    def default_action(self):
        # return self.uniform_file_creation()
        hosts = [h for h in self.sessions_map.keys()]
        # if self.sunk_trigger_step > 0 and self.step > self.sunk_trigger_step:
        #     if self.host_index_sunk < len(self.sessions_map.keys()):
        #         chosen_hostname = hosts[self.host_index_sunk]
        #         self.host_index_sunk += 1
        #         return self.create_uncrackable_file(chosen_hostname, 10)
        #
        # if self.availability_trigger_step > 0 and self.step > self.availability_trigger_step:
        #     return self.uniform_file_creation()
        #
        # if self.base_rate_neglect_trigger_step > 0 and self.step > self.base_rate_neglect_trigger_step:
        #     if self.host_index_base_rate < len(self.sessions_map.keys()):
        #         chosen_hostname = hosts[self.host_index_base_rate]
        #         self.host_index_base_rate += 1
        #         return self.create_sounding_file(chosen_hostname,20)

        if self.host_index < len(self.sessions_map.keys()):
            chosen_hostname = hosts[self.host_index]
            self.host_index += 1
            return self.create_files(hostname=chosen_hostname, num=30)
        elif not self.cred_depoly and self.sunk_trigger_step > 0 and self.step > self.sunk_trigger_step:
            for hostname in hosts:
                if 'server' in hostname:
                    self.cred_depoly=True
                    return self.create_cred_files(hostname=hostname)
        # elif not self.banner_depoly and self.false_banner_trigger_step > 0 and self.step > self.false_banner_trigger_step:
        #     for hostname in hosts:
        #         if 'server' in hostname:
        #             self.cred_depoly=True
        #             return self.create_cred_files(hostname=hostname)
        else:
            return Sleep()
        # self.last_action = 'DeployDecoy'
        # return DeployDecoy(session=0, agent=self.name, hostname=chosen_hostname)
        # fname='important_'+str(random.randint(10000, 99999))+'.txt'
        # return self.create_file(hostname=chosen_hostname,filename=fname)


    def multiple_apache_decoy(self, decoy_num=3):
        self.last_action = 'MultipleDecoyApache'
        if self.apache_index < len(list(self.sessions_map.keys())):
            hostname=list(self.sessions_map.keys())[self.apache_index]
            self.apache_index += 1
        else:
            hostname=random.choice(list(self.sessions_map.keys()))
        return MultipleDeployApache(session=0, agent=self.name, hostname=hostname, decoy_num=decoy_num)

    def create_files(self, hostname, num):
        self.last_action = 'FileCreation'
        filenames = []
        values = []
        hardness = []
        passwordlist = []
        for i in range(num):
            filename=hostname+'_file_' + str(i)
            filenames.append(filename)
            values.append(random.randint(1, 100))
            hardness.append(random.uniform(0.5, 0.8))
            password=random.randint(1,99999)
            passwordlist.append(password)
            if random.random()<0.8:
                self.file_records[filename] = password
            else:
                self.file_records[filename] = random.randint(1,99999)
        filename = hostname + '_file_' + str(num)
        filenames.append(filename)
        values.append(random.randint(100, 120))
        hardness.append(1)
        password = random.randint(1, 99999)
        passwordlist.append(password)
        self.file_records[filename] = random.randint(1, 99999) #fake
        return FilesCreation(hostname=hostname, filenames=filenames, valuelist=values, hardnesslist=hardness,passwordlist=passwordlist)

    def create_cred_files(self, hostname):
        self.last_action = 'FileCreation'
        return FilesCreation(hostname=hostname, filenames=['file_creds.txt'], message=self.file_records)

    def create_uncrackable_file(self, hostname, num):
        self.last_action = 'FileCreation'
        filenames = []
        values = []
        hardness = []
        for i in range(num):
            filenames.append('uncrackable_file_' + str(random.randint(100000, 999999)))
            values.append(random.randint(101, 150))
            hardness.append(1)
        return FilesCreation(hostname=hostname, filenames=filenames, valuelist=values, hardnesslist=hardness)

    def create_sounding_file(self, hostname, num):
        self.last_action = 'FileCreation'
        filenames = []
        values = []
        hardness = []
        true_values=[]
        for i in range(num):
            filenames.append('valuable_file_' + str(random.randint(100000, 999999))+'.txt')
            values.append(random.randint(101, 150))
            if i==0:
                true_values.append(values[i])
            else:
                true_values.append(int(values[i]/2))
            hardness.append(random.random())
        return FilesCreation(hostname=hostname, filenames=filenames,
                             valuelist=values, hardnesslist=hardness,true_value_list=true_values)

    def uniform_file_creation(self):
        self.last_action = 'FileCreation'
        filenames = []
        values = []
        hardness = []
        hostnames=[]
        for hostname in self.sessions_map.keys():
            filenames.append('file_' + str(random.randint(100000, 999999)))
            values.append(random.randint(1, 50))
            hardness.append(1)
            hostnames.append(hostname)
        return FilesCreation(hostname=hostnames, filenames=filenames, valuelist=values, hardnesslist=hardness)

    def create_admin_user(self,hostname,username,password):
        return UserCreation(hostname=hostname,username=username,password=password)

    def trigger_6(self,hostname):
        #create_sounding_cred_file
        filename='finance_server_'+str(random.randint(1,100))+'_creds.txt'
        message={'username':'kk','password':str(random.randint(1,99999))}
        return FilesCreation(hostname=[hostname], filenames=[filename],message=message)

    def get_action(self, observation: dict, action_space: dict):
        self.allowed_subnet = action_space['allowed_subnets'][0]
        invalid_actions = self.excluded_actions[:]
        if self.step == 0:
            self.subnet_name = action_space['subnet']
            for host_id, host_details in observation.items():
                hostname = None
                ip = None
                if host_id == 'success' or host_id == 'reward':
                    continue
                if '_' in host_id:
                    hostname = host_id
                elif 'System info' in host_details:
                    if 'Hostname' in host_details['System info']:
                        hostname = host_details['System info']['Hostname']
                if 'Interface' in host_details:
                    ip = str(host_details['Interface'][0]['ip_address'])
                if 'Sessions' in host_details:
                    self.sessions_map[hostname] = host_details['Sessions'][0]
                self.ip_map[hostname] = ip
        self.step += 1
        action = None
        success = None

        if 'success' in observation.keys():
            success = observation.pop('success')
        if 'action' in observation.keys():
            action = observation.pop('action')

        if success.name == 'IN_PROGRESS':
            return Sleep()
        elif success.name == 'UNKNOWN' or len(observation) == 0:
            if self.ava_trigger_step>0 and self.step>self.ava_trigger_step:
                return self.multiple_apache_decoy(1)
            else:
                return Analyse(session=0, agent=self.name,
                                            hostname=random.choice(list(self.sessions_map.keys())))
        else:
            for host_name, host_details in observation.items():
                if self.last_action == 'Analyse':
                    if 'Files' in host_details:
                        for file in host_details['Files']:
                            if 'Density' in file and file['Density'] > 0.5:
                                if file['File Name'] == 'cmd.sh' and \
                                        (host_name not in self.bad_hosts or self.bad_hosts[host_name] == 'KD'):
                                    self.bad_hosts[host_name] = 'U'
                                elif file['File Name'] == 'escalate.sh':
                                    self.bad_hosts[host_name] = 'R'
                    if host_name in self.bad_hosts:
                        if self.bad_hosts[host_name] == 'U':
                            self.last_action = 'Remove'
                            self.bad_hosts[host_name] = 'KD'
                            # print(self.name + ' remove ' + host_name + ' at step ' + str(self.step))
                            return Remove(session=0, agent=self.name, hostname=host_name)
                        elif self.bad_hosts[host_name] == 'R':
                            self.last_action = 'Restore'
                            self.bad_hosts[host_name] = 'KD'
                            # print(self.name+' restore ' + host_name + ' at step ' + str(self.step))
                            return Restore(session=0, agent=self.name, hostname=host_name)
                if 'Processes' in host_details:
                    if self.last_action == 'DeployDecoy' and 'PID' in host_details['Processes'][0]:
                        self.decoy_pids.append(host_details['Processes'][0]['PID'])
                        continue
                    else:
                        self.last_action = 'Analyse'
                        return Analyse(session=0,
                                       agent=self.name,
                                       hostname=host_name)
            if self.ava_trigger_step > 0 and self.step > self.ava_trigger_step:
                return self.multiple_apache_decoy(1)
            else:
                return Analyse(session=0, agent=self.name,
                                   hostname=random.choice(list(self.sessions_map.keys())))
    def end_episode(self):
        pass

    def set_initial_values(self, action_space, observation):
        if type(action_space) is dict:
            self.action_params = {action_class: signature(action_class).parameters for action_class in
                                  action_space['action'].keys()}
