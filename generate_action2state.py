from CybORG import CybORG
from CybORG.Agents import SleepAgent, FiniteStateRedAgent, EnterpriseGreenAgent
from CybORG.Simulator.Scenarios import EnterpriseScenarioGenerator

aggressive_para = []
with open('default_para.txt', 'r') as file:
    lines = file.readlines()[3:]
    for line in lines:
        line = line.strip()
        if line:
            param_values = [float(value) for value in line.split(',')]
            aggressive_para.append(tuple(param_values))

hostname_ip_map={}
action_list = [ 'DiscoverRemoteSystems',
                'AggressiveServiceDiscovery',
                'StealthServiceDiscovery',
                'DiscoverDeception',
                'ExploitRemoteService',
                'PrivilegeEscalate',
                'Impact',
                'DegradeServices',
                'Withdraw']
statelists = [
    'K',
    'KD',
    'S',
    'SD',
    'U',
    'UD',
    'R',
    'RD',
    'F']
filename = 'action_host_default_2.txt'
statefilename = 'state_host_default_2.txt'

steps = 800
ag_sg = EnterpriseScenarioGenerator(blue_agent_class=SleepAgent,
                                    green_agent_class=EnterpriseGreenAgent,
                                    red_agent_class=FiniteStateRedAgent,
                                    steps=steps,
                                    redParameters=aggressive_para,
                                    )
with open(filename, 'w') as file, open(statefilename, 'w') as file2:
    # Initialise environment
    for epoch in range(5):
        cyborg = CybORG(scenario_generator=ag_sg,seed=12311)
        host_actions={}
        host_states={}
        for i in range(steps):
            cyborg.step()
            step_actions = cyborg.environment_controller.action
            action=step_actions['red_agent_0'][0]
            if action.name=="Sleep":
                continue

            total_host_states = cyborg.environment_controller.agent_interfaces['red_agent_0'].agent.host_states
            for ip in total_host_states.keys():
                if total_host_states[ip]['hostname'] is not None and total_host_states[ip]['hostname'] not in hostname_ip_map:
                    hostname_ip_map[total_host_states[ip]['hostname']] = ip

            if ip not in total_host_states.keys():
                continue
            line = 'Action,' + action.name
            if action.name == 'DiscoverRemoteSystems':
                ip = action.subnet.with_prefixlen
                for ip in total_host_states:
                    if 'D' not in total_host_states[ip]['state']:
                        if ip not in host_actions:
                            host_actions[ip] = [action_list.index(action.name)]
                            host_states[ip]=[total_host_states[ip]['state']]
                        else:
                            host_actions[ip].append(action_list.index(action.name))
                            host_states[ip].append(total_host_states[ip]['state'])
                continue
            elif hasattr(action, 'ip_address'):
                ip = action.ip_address.compressed
            else:
                ip = hostname_ip_map[action.hostname]
            if ip not in host_actions:
                host_actions[ip] = [action_list.index(action.name)]
                host_states[ip] = [total_host_states[ip]['state']]
            else:
                host_actions[ip].append(action_list.index(action.name))
                host_states[ip].append(total_host_states[ip]['state'])
        for ip in host_actions.keys():
            for action in host_actions[ip]:
                file.write(str(action))
            file.write('\n')
            for state in host_states[ip]:
                file2.write(str(statelists.index(state)))
            file2.write('\n')
