from collections import defaultdict

real_data_path = 'sample actions_4_trigger'
synthetic_data_path = 'synthetic data_4_trigger_2'
best_data_path='best synthetic data_4_trigger'
random_data_path='randomly synthetic data_4_trigger'

titles=['Rate of Calling Aggressive Service Discovery',
        'Rate of Confirming Credential File Checking',
       'Frequecny of Cracking the Same File']

def readfile(filepath,jump=False):
    label=[]
    parameters=[]
    with open(filepath, 'r') as file:
        lines = file.readlines()

    action_frequency = {
        'DiscoverRemoteSystems': 0,
        'AggressiveServiceDiscovery': 0,
        'StealthServiceDiscovery': 0,
        'DiscoverDeception': 0,
        'ExploitRemoteService': 0,
        'PrivilegeEscalate': 0,
        'InformationDiscover': 0,
        'CrackPassword': 0,
        'CheckCredFile':0
    }

    crack_password_targets = defaultdict(int)
    idx = 0
    con = 0
    dis = 0
    for line in lines:
        if idx<3 and not jump:
            parts = line.strip().split()
            label.append(int(parts[1]))
        if idx > 4 or jump:
            parts = line.strip().split()
            agent_name = parts[0]
            action = parts[1]
            target = parts[2]
            action_frequency[action] += 1
            if action == 'CrackPassword':
                crack_password_targets[target] += 1
            elif action == 'CheckCredFile':
                if target=='Confirmation':
                    con+=1
                else:
                    dis+=1
        idx+=1
    try:
        max_crack_attempt = max(crack_password_targets.values())
    except:
        print(filepath)
    X = []
    X.append(action_frequency['AggressiveServiceDiscovery'] /
             (action_frequency['AggressiveServiceDiscovery'] + action_frequency['StealthServiceDiscovery']))
    if con+dis==0:
        X.append(0.5)
    else:
        X.append(con/(con+dis))
    X.append(max_crack_attempt)
    if not jump:
        return label,X
    else:
        return X


import os
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from matplotlib import pyplot as plt
plt.rcParams.update({'font.size': 17})
cognitive_bias_num=3
extent=2
file_num=50
group_num=pow(extent,cognitive_bias_num)# 8

def compare(real_data_path, synthetic_data_path):
    distance = np.zeros((group_num, cognitive_bias_num,file_num))
    num = np.zeros(group_num)
    idxs=np.zeros((group_num, cognitive_bias_num))
    for filename in os.listdir(synthetic_data_path):
        synthetic_file = os.path.join(synthetic_data_path, filename)
        real_file = os.path.join(real_data_path, filename)
        synthetic_x=readfile(synthetic_file,jump=True)
        label,real_x=readfile(real_file)
        group=label[0]*4+label[1]*2+label[2]
        for i in range(cognitive_bias_num):
            idx=int(idxs[group][i])
            distance[group][i][idx]=abs(real_x[i]-synthetic_x[i])
            idxs[group][i] += 1
    #     num[group]+=1
    # distance/=num[:, np.newaxis]
    avg=np.zeros((group_num, cognitive_bias_num))
    std=np.zeros((group_num, cognitive_bias_num))
    for group in range(len(distance)):
        for bias in range(len(distance[group])):
            avg[group][bias]=np.average(distance[group][bias])
            std[group][bias]=np.std(distance[group][bias])
            if std[group][bias]<0:
                print('kk')
    return avg, std


avg, std=compare(real_data_path,synthetic_data_path)
best_avg, best_std=compare(real_data_path,best_data_path)
random_avg, random_std=compare(real_data_path,random_data_path)
num_rows, num_cols = avg.shape
x = np.arange(num_rows)

bar_width = 0.2
pic_names=['ag_dis_4_trigger.png','confirming evidence_trigger.png','sunk_distance_trigger.png']

for i in range(num_cols):
    plt.figure(figsize=(10, 6))
    # Bar plot for avg with error bars
    plt.bar(x - bar_width, avg[:, i], yerr=std[:, i], width=bar_width, color='C0', label='Parameters are sampled',
            capsize=5)

    # Bar plot for best_avg with error bars
    plt.bar(x, best_avg[:, i], yerr=best_std[:, i], width=bar_width, color='C1', label='Parameters of the real data are used',
             capsize=5)

    # Bar plot for random_avg with error bars
    plt.bar(x + bar_width, random_avg[:, i], yerr=random_std[:, i], width=bar_width, color='C2', label='Parameters are randomized',
            capsize=5)

    # plt.bar(x-bar_width, distance[:, i],width=bar_width, color=f'C{0}', label=f'parameters are sampled')
    # plt.bar(x, best_distance[:, i],width=bar_width, color=f'C{1}', label=f'parameters of the real data'
    #                                                                                f' are used')
    # plt.bar(x + bar_width, random_distance[:, i], width=bar_width, color=f'C{2}',
    #          label=f'parameters are randomized')
    plt.xlabel('Biases state')
    plt.ylabel('Distance with inputed action sequence')
    plt.title(titles[i])
    plt.xticks(x, ['$Î¸_' + str(j) + '$' for j in range(num_rows)])
    plt.legend()
    plt.grid(True)
    plt.savefig(pic_names[i])
    # if i==num_cols-1:
    #     plt.ylim(0,5)
    #     plt.savefig('sunk_distance_short.png')

