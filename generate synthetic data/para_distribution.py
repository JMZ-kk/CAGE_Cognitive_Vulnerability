import os

import matplotlib.pyplot as plt
import numpy as np
from collections import defaultdict

def readfile(filepath):
    label=[]
    parameters=[]
    with open(filepath, 'r') as file:
        lines = file.readlines()

    action_frequency = {
        'DiscoverRemoteSystems':0,
        'AggressiveServiceDiscovery':0,
        'StealthServiceDiscovery':0,
        'DiscoverDeception':0,
        'ExploitRemoteService':0,
        'PrivilegeEscalate':0,
        'InformationDiscover':0,
        'CrackPassword':0
    }
    crack_password_targets = defaultdict(int)
    idx=0
    for line in lines:
        if idx<3:
            parts = line.strip().split()
            label.append(parts[1])
        elif idx==3:
            parts = line.strip().split(',')
            parameters=[float(part) for part in parts]
        elif idx>4:
            parts = line.strip().split()
            agent_name = parts[0]
            action = parts[1]
            target = parts[2]
            action_frequency[action] += 1
            if action == 'CrackPassword':
                crack_password_targets[target] += 1
        idx+=1
    return label,parameters

# 假设这是你的两个列表
strong_bias = {}
weak_bias = {}
strong_bias[0]=[]
strong_bias[1]=[]
strong_bias[2]=[]
weak_bias[0]=[]
weak_bias[1]=[]
weak_bias[2]=[]
folder_path='paradata_4'
for filename in os.listdir(folder_path):
    file_path = os.path.join(folder_path, filename)
    label,parameters=readfile(file_path)
    if label[0] == '1':
        strong_bias[0].append(parameters[0])
    else:
        weak_bias[0].append(parameters[0])
    if label[1] == '1':
        if parameters[2]>1:
            parameters[2]=1
        strong_bias[1].append(parameters[2])
    else:
        weak_bias[1].append(parameters[2])
    if label[2] == '1':
        strong_bias[2].append(parameters[3])
    else:
        weak_bias[2].append(parameters[3])

def visualization(strong_bias,weak_bias,name,para_name,pic_name):
    import matplotlib.pyplot as plt
    plt.rcParams.update({'font.size': 15})

    fig, ax = plt.subplots(figsize=(10, 6))
    ax.hist(strong_bias, bins=20, density=True, alpha=0.5, label='High Bias Distribution of '+para_name+' in the\n training dataset', color='r')
    strong_mu = np.mean(strong_bias)
    strong_sigma = np.std(strong_bias)
    print(strong_mu)
    print(strong_sigma)
    # strong_mu = 0.8
    # strong_sigma = 0.2
    x = np.linspace(min(strong_bias), max(strong_bias), 100)
    y = (1 / (np.sqrt(2 * np.pi) * strong_sigma)) * np.exp(-(x - strong_mu)**2 / (2 * strong_sigma**2))
    ax.plot(x, y, 'r', lw=2, label='Estimated High Bias Distribution of '+para_name)

    ax.hist(weak_bias, bins=20, density=True, alpha=0.5, label='Low Bias Distribution of '+para_name+' in the\n training dataset', color='b')
    weak_mu = np.mean(weak_bias)
    weak_sigma = np.std(weak_bias)
    # weak_mu = 0.2
    # weak_sigma = 0.2
    print(weak_mu)
    print(weak_sigma)
    x = np.linspace(min(weak_bias), max(weak_bias), 100)
    y = (1 / (np.sqrt(2 * np.pi) * weak_sigma)) * np.exp(-(x - weak_mu)**2 / (2 * weak_sigma**2))
    ax.plot(x, y, 'b', lw=2, label='Estimated Low Bias Distribution of '+para_name)

    ax.set_title(name+' Bias Distribution of '+para_name, fontsize=20)
    ax.set_xlabel('Value', fontsize=20)
    ax.set_ylabel('Probability Density', fontsize=20)
    ax.legend()
    plt.savefig(pic_name)
    return strong_mu,strong_sigma,weak_mu,weak_sigma

visualization(strong_bias[0],weak_bias[0],'Loss Aversion','$λ_l$','loss aversion distribution.png')
visualization(strong_bias[1],weak_bias[1],'Confirmation Bias','$λ_c$','confirmation bias distribution.png')
visualization(strong_bias[2],weak_bias[2],'Sunk cost fallacy','$λ_s$','sunk cost fallacy distribution.png')