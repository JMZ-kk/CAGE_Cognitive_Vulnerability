from tool import *

def generate_agent(isAggressive, isConfirmationBias, isSCF):
    parameters=[]
    if isAggressive:
        p1=np.random.normal(1.51, 0.21)
    else:
        p1 = max(np.random.normal(0.5, 0.2),0)
    parameters.append(p1)

    if isConfirmationBias:
        p3 = min(np.random.normal(0.79, 0.1), 1)
    else:
        p3 = max(np.random.normal(0.2, 0.1), 0)
    parameters.append(0.5)
    parameters.append(p3)

    if isSCF:
        scf = min(np.random.normal(798, 39), 1000)
    else:
        scf = max(np.random.normal(201, 42), 0)

    parameters.append(scf)
    return parameters

with open('decision_tree_model_4.pkl', 'rb') as f:
    loaded_clf = pickle.load(f)

import os
input_path= 'sample actions_4'
output_path= 'synthetic data_4/'
os.makedirs(output_path, exist_ok=True)
for filename in os.listdir(input_path):
    print(filename)
    file_path = os.path.join(input_path, filename)
    _, parameters, X = readfile(file_path)
    label=loaded_clf.predict(np.array([X]))[0]
    parameter=generate_agent(label[0]=='1',label[1]=='1',label[2]=='1')
    cyborg = create_env(parameter,steps=600)
    simulation(name=filename, cyborg=cyborg,output_path=output_path,steps=600)
