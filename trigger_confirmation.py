from CybORG import CybORG
from CybORG.Agents import SleepAgent, FiniteStateRedAgent, EnterpriseGreenAgent
from CybORG.Agents.SimpleAgents.MyBlueAgent import MyBlueAgent
from CybORG.Agents.SimpleAgents.RandomAgent import cc4BlueRandomAgent
from CybORG.Simulator.Scenarios import EnterpriseScenarioGenerator
from CybORG.Simulator.Actions.AbstractActions import *
import numpy as np
import matplotlib.pyplot as plt

steps = 600
bias_dimension=8
df_sg = EnterpriseScenarioGenerator(blue_agent_class=MyBlueAgent,
                                    green_agent_class=EnterpriseGreenAgent,
                                    red_agent_class=FiniteStateRedAgent,
                                    steps=steps,
                                    # redParameters=aggressive_para,
                                    )

actions={}
for i in range(6):
    actions['red_agent_'+str(i)]=[]
filename = 'cred_check_ratio.txt'
cracking_log=[]
total_times=0
uncracks_times=0
uncrack_rates=np.zeros(steps)
epoch_num=4
max_crack_times=np.zeros((epoch_num,6,steps))
coefficient=[0.2,0.4]
total=0
with open(filename, 'w') as file:
    # Initialise environment
    for epoch in range(epoch_num):
        df_sg.message={'confirm':coefficient[epoch%len(coefficient)]}
        cyborg = CybORG(scenario_generator=df_sg)
        for step in range(steps):
            cyborg.step()
            step_actions = cyborg.environment_controller.action
            for i in range(6):
                agent_name='red_agent_'+str(i)
                action=step_actions[agent_name][0]
                agent=cyborg.environment_controller.agent_interfaces[agent_name].agent
                max_crack_times[epoch][i][step] = max(max_crack_times[epoch][i][step], max_crack_times[epoch][i][step - 1])
                if action.name=="Sleep":
                    continue
                if isinstance(action,CheckCredFile):
                    max_crack_times[epoch][i][step] += 1
                    total+=1
                actions[agent_name].append(action.name)
    print(total)
    res=np.zeros((epoch_num,steps))
    for epoch in range(epoch_num):
        for step in range(steps):
            for i in range(1,6):
                res[epoch][step]+=max_crack_times[epoch][i][step]
            res[epoch][step]/=5
            dis=20
            if step>300+(dis+1)//2 and epoch==0:
                file.write(str('{:.1f}'.format(res[epoch][step]-res[epoch][step-dis])))
                file.write(',0\n')
            elif step>300+(dis+1)//2 and epoch==1:
                file.write(str('{:.1f}'.format(res[epoch][step]-res[epoch][step-dis])))
                file.write(',1\n')


    for i in range(2,epoch_num):
        if i%2==0:
            res[0]+=res[i]
        else:
            res[1]+=res[i]
    res/=epoch_num/len(coefficient)
    plt.plot(res[0],label='LOW Confirmation Bias')
    plt.plot(res[1], label='HIGH Confirmation Bias')
    plt.title('Time spent confirming cred files\' correctness')
    plt.xlabel('Steps')
    plt.ylabel('Checking action times')
    plt.legend()
    plt.show()
